# _*_ coding: utf-8 -*_
# 第三课，字符串和编码

#因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。
#最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节
#能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，
#就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。
#
#由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、
#数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。
#但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，
#所以，中国制定了GB2312编码，用来把中文编进去。

#因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
#ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
#eg. 字母A用ASCII编码是十进制的65，二进制的01000001；
#    如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。

#新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。
#但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
#所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。
#UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，
#只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间.
#字符	ASCII		Unicode				UTF-8
#A		01000001	00000000 01000001	01000001
#中		x			01001110 00101101	11100100 10111000 10101101
#UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，
#所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。

#总结一下现在计算机系统通用的字符编码工作方式：
#在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
#用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，
#保存的时候再把Unicode转换为UTF-8保存到文件
#浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器

#Python，早起只支持ascii编码，后来添加了对Unicode的支持，以Unicode表示的字符串用u'...'表示
print u'中'
print u'\u4e2d'
print u'中'.encode('utf-8')

###一般我们在文件的开始输入
#!/usr/bin/env python
# -*- coding: utf-8 -*- '''

# 格式化字符串
print 'Hi, %s, you have $%d.' % ('Michael', 1000000)
# 常见的占位符有：
# %d	整数
# %f	浮点数
# %s	字符串
# %x	十六进制整数
print '%3d-%05d' % (3, 123) #   3-00123
print '%.2f' % 3.1415926  #小数点  3.14

#如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串
print 'Age: %s. Gender: %s' % (25, True)
